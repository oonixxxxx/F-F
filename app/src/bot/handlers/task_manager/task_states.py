from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from datetime import datetime

from app.src.bot.states_handler.statess import TaskListForm
from app.src.bot.keyboards.keyboard_handler import get_tasks_inline_keyboard, get_time_suggestion_keyboard
from app.src.bot.handlers.task_manager.task_service import add_simple_task, create_task_data, save_task_with_time
from .task_storage import user_task_lists, user_edit_data

router = Router()


@router.message(TaskListForm.adding_tasks)
async def add_task_to_list(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ adding_tasks"""
    user_id = message.from_user.id
    
    # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∫–Ω–æ–ø–æ–∫
    button_commands = [
        "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–ø–∏—Å–æ–∫", "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", 
        "üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", "‚ùå –û—Ç–º–µ–Ω–∞"
    ]
    if message.text in button_commands:
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
    await add_simple_task(message, user_id)


@router.message(TaskListForm.waiting_for_tasks)
async def process_quick_tasks(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞"""
    user_id = message.from_user.id
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞–∑–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
    text = message.text.strip()
    
    if '\n' in text:
        tasks_texts = [task.strip() for task in text.split('\n') if task.strip()]
    elif ',' in text:
        tasks_texts = [task.strip() for task in text.split(',') if task.strip()]
    else:
        tasks_texts = [text]
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏
    tasks_texts = [task for task in tasks_texts if task]
    
    if not tasks_texts:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–¥–∞—á!")
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –ë–ï–ó –≤—Ä–µ–º–µ–Ω–∏
    tasks_data = [create_task_data(task_text) for task_text in tasks_texts]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫
    user_task_lists[user_id] = {
        'tasks': tasks_data,
        'created_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    print(f"üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω: {len(tasks_data)} –∑–∞–¥–∞—á - {message.from_user.full_name}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks_text = "‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω!\n\n"
    for i, task_data in enumerate(tasks_data, 1):
        tasks_text += f"{i}. {task_data['text']}\n"
    
    tasks_text += f"\nüìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks_data)}"
    
    await message.answer(tasks_text, reply_markup=get_tasks_inline_keyboard())
    await state.clear()


@router.message(TaskListForm.waiting_for_task_text)
async def process_task_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º"""
    user_id = message.from_user.id
    
    if user_id not in user_edit_data:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    task_text = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
    if not task_text:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
        return
    
    if len(task_text) > 200:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. 200 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—á–µ:")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    user_edit_data[user_id]['task_text'] = task_text
    user_edit_data[user_id]['step'] = 'waiting_for_time'
    
    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
    await message.answer(
        f"‚è±Ô∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞—á–∏:\n"
        f"üìù '{task_text}'\n\n"
        f"–ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –≤—Ä–µ–º—è –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
        reply_markup=get_time_suggestion_keyboard()
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    await state.set_state(TaskListForm.waiting_for_task_time)


@router.message(TaskListForm.waiting_for_task_time)
async def process_custom_time_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    user_id = message.from_user.id
    
    if user_id not in user_edit_data:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    time_input = message.text.strip()
    
    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
    if not time_input:
        await message.answer("‚ùå –í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è:")
        return
    
    if len(time_input) > 50:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—á–µ:")
        return
    
    await save_task_with_time(message, state, time_input)


@router.message(TaskListForm.editing_task)
async def process_task_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    user_id = message.from_user.id
    
    if user_id not in user_edit_data or user_edit_data[user_id]['action'] != 'renaming':
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        await state.clear()
        return
    
    if user_id not in user_task_lists:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    edit_data = user_edit_data[user_id]
    task_index = edit_data['task_index']
    new_text = message.text.strip()
    
    if not new_text:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
    old_text = user_task_lists[user_id]['tasks'][task_index]['text']
    user_task_lists[user_id]['tasks'][task_index]['text'] = new_text
    
    # –í—ã–≤–æ–¥–∏–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print(f"‚úèÔ∏è –ó–∞–¥–∞—á–∞ #{task_index + 1} –∏–∑–º–µ–Ω–µ–Ω–∞:")
    print(f"   –ë—ã–ª–æ: '{old_text}'")
    print(f"   –°—Ç–∞–ª–æ: '{new_text}' - {message.from_user.full_name}")
    
    await message.answer(
        f"‚úÖ –ó–∞–¥–∞—á–∞ ‚Ññ{task_index + 1} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n\n"
        f"üìù –ë—ã–ª–æ: {old_text}\n"
        f"üìù –°—Ç–∞–ª–æ: {new_text}",
        reply_markup=get_tasks_inline_keyboard()
    )
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id in user_edit_data:
        del user_edit_data[user_id]
    
    await state.clear()