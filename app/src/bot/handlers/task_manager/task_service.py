from datetime import datetime
from typing import Dict, List, Any, Optional, Union
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.src.bot.states_handler.statess import TaskListForm
from app.src.bot.keyboards.keyboard_handler import (
    get_tasks_inline_keyboard, 
    get_time_suggestion_keyboard,
    ReplyKeyboardMarkup
)

from .task_storage import (
    user_task_lists, 
    user_edit_data,
    get_user_task_list,
    set_user_task_list,
    get_user_edit_data,
    set_user_edit_data,
    delete_user_edit_data,
    user_has_active_list,
    get_user_tasks
)


def initialize_user_task_list(user_id: int) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_task_lists[user_id] = {
        'tasks': [],
        'created_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }


def create_task_data(text: str, time: Optional[str] = None) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏"""
    return {
        "text": text.strip(),
        "time": time,
        "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "has_time": time is not None
    }


async def add_simple_task(message: Message, user_id: int) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–¥–∞—á–∏ (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)"""
    task_text = message.text.strip()
    task_data = create_task_data(task_text)
    
    user_task_lists[user_id]['tasks'].append(task_data)
    current_count = len(user_task_lists[user_id]['tasks'])
    
    print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ #{current_count}: '{task_text}' - {message.from_user.full_name}")
    
    await message.answer(
        f"‚úÖ –ó–∞–¥–∞—á–∞ #{current_count} –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
        reply_markup=get_tasks_inline_keyboard()
    )


async def finish_task_list(callback: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
    user_id = callback.from_user.id
    
    if not user_has_active_list(user_id):
        await callback.message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–¥–∞—á—É.")
        return
    
    tasks = get_user_tasks(user_id)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    _log_final_task_list(user_id, callback.from_user.full_name, tasks)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks_text = _format_final_task_list(tasks)
    
    await callback.message.answer(
        tasks_text,
        reply_markup=ReplyKeyboardMarkup(remove_keyboard=True)
    )
    
    # –û—á–∏—Å—Ç–∫–∞
    if user_id in user_task_lists:
        del user_task_lists[user_id]
    await state.clear()


def _log_final_task_list(user_id: int, username: str, tasks: List[Dict]) -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
    tasks_with_time = sum(1 for task in tasks if task.get("has_time"))
    
    print("=" * 70)
    print("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –°–ü–ò–°–û–ö –ó–ê–î–ê–ß")
    print("=" * 70)
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user_id})")
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}")
    print(f"‚è±Ô∏è –ó–∞–¥–∞—á —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º: {tasks_with_time}")
    print("-" * 70)
    
    for i, task_data in enumerate(tasks, 1):
        task_text = task_data["text"]
        task_time = task_data.get("time")
        
        if task_time:
            print(f"{i:2d}. {task_text} [{task_time}]")
        else:
            print(f"{i:2d}. {task_text}")
    
    print("=" * 70)


def _format_final_task_list(tasks: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    tasks_text = "‚úÖ –í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
    tasks_with_time = 0
    
    for i, task_data in enumerate(tasks, 1):
        task_text = task_data["text"]
        task_time = task_data.get("time")
        
        if task_time:
            tasks_text += f"{i}. {task_text} ‚è±Ô∏è {task_time}\n"
            tasks_with_time += 1
        else:
            tasks_text += f"{i}. {task_text}\n"
    
    tasks_text += f"\nüìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}"
    
    if tasks_with_time > 0:
        tasks_text += f"\n‚è±Ô∏è –ó–∞–¥–∞—á —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º: {tasks_with_time}"
    
    return tasks_text


async def clear_task_list(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
    user_id = callback.from_user.id
    if user_id in user_task_lists:
        user_task_lists[user_id]['tasks'] = []
    
    await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ!")
    print(f"üîÑ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.full_name}")


async def show_current_list(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
    user_id = callback.from_user.id
    
    if not user_has_active_list(user_id):
        await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç")
        return
    
    tasks = get_user_tasks(user_id)
    tasks_text = "üìã –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n\n"
    
    for i, task_data in enumerate(tasks, 1):
        task_text = task_data["text"]
        task_time = task_data.get("time")
        
        if task_time:
            tasks_text += f"{i}. {task_text} ‚è±Ô∏è {task_time}\n"
        else:
            tasks_text += f"{i}. {task_text}\n"
    
    await callback.message.answer(tasks_text, reply_markup=get_tasks_inline_keyboard())


async def edit_list(callback: CallbackQuery) -> None:
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
    user_id = callback.from_user.id
    
    if not user_has_active_list(user_id):
        await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç! –ù–µ—á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.")
        return
    
    from app.src.bot.keyboards.keyboard_handler import get_edit_inline_keyboard
    await callback.message.answer(
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á:",
        reply_markup=get_edit_inline_keyboard()
    )


async def delete_list(callback: CallbackQuery, state: FSMContext) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
    user_id = callback.from_user.id
    
    if user_id not in user_task_lists:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    from app.src.bot.keyboards.keyboard_handler import get_confirm_inline_keyboard
    await callback.message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á?",
        reply_markup=get_confirm_inline_keyboard("delete")
    )


async def add_task_with_time_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º"""
    user_id = callback.from_user.id
    
    if not user_has_active_list(user_id):
        await callback.message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á! –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ /add_tasks_list"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    user_edit_data[user_id] = {
        'action': 'adding_task_with_time',
        'step': 'waiting_for_text'
    }
    
    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
    await callback.message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:\n\n"
        "–ü—Ä–∏–º–µ—Ä: '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É' –∏–ª–∏ '–ò–∑—É—á–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é'"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
    await state.set_state(TaskListForm.waiting_for_task_text)


async def time_custom_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –≤—Ä–µ–º—è"""
    user_id = callback.from_user.id
    
    if user_id not in user_edit_data:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    await callback.message.answer(
        "‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –≤—Ä–µ–º—è –¥–ª—è –∑–∞–¥–∞—á–∏:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ '30 –º–∏–Ω—É—Ç'\n" 
        "‚Ä¢ '2 —á–∞—Å–∞'\n"
        "‚Ä¢ '1 –¥–µ–Ω—å'\n"
        "‚Ä¢ '45 –º–∏–Ω'\n"
        "‚Ä¢ '3 —á–∞—Å–∞ 30 –º–∏–Ω—É—Ç'"
    )


async def cancel_time_input_handler(callback: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º"""
    user_id = callback.from_user.id
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id in user_edit_data:
        del user_edit_data[user_id]
    
    await callback.message.answer(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=get_tasks_inline_keyboard()
    )
    
    await state.clear()


async def handle_time_suggestion(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –±—ã—Å—Ç—Ä—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
    user_id = callback.from_user.id
    
    if user_id not in user_edit_data:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ callback data
    time_mapping = {
        "time_15min": "15 –º–∏–Ω—É—Ç",
        "time_30min": "30 –º–∏–Ω—É—Ç", 
        "time_1h": "1 —á–∞—Å",
        "time_2h": "2 —á–∞—Å–∞",
        "time_4h": "4 —á–∞—Å–∞",
        "time_1d": "1 –¥–µ–Ω—å"
    }
    
    selected_time = time_mapping.get(callback.data)
    
    if selected_time:
        await save_task_with_time(callback, state, selected_time)


async def save_task_with_time(update: Union[Message, CallbackQuery], state: FSMContext, task_time: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if isinstance(update, CallbackQuery):
        user_id = update.from_user.id
        message = update.message
    else:
        user_id = update.from_user.id
        message = update
    
    if user_id not in user_edit_data or user_id not in user_task_lists:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    task_text = user_edit_data[user_id].get('task_text')
    
    if not task_text:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–¥–∞—á–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º
    task_data = create_task_data(task_text, task_time)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_task_lists[user_id]['tasks'].append(task_data)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
    total_tasks = len(user_task_lists[user_id]['tasks'])
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
    print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º #{total_tasks}: '{task_text}' [{task_time}] - {message.from_user.full_name}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        f"üìù {task_text}\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è: {task_time}\n"
        f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ —Å–ø–∏—Å–∫–µ: {total_tasks}\n\n"
        f"–ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∑–∞–¥–∞—á–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:",
        reply_markup=get_tasks_inline_keyboard()
    )
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id in user_edit_data:
        del user_edit_data[user_id]
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    await state.set_state(TaskListForm.adding_tasks)


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
async def back_to_main_inline(callback: CallbackQuery) -> None:
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
    await callback.message.answer(
        "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        reply_markup=get_tasks_inline_keyboard()
    )


async def add_task_inline(callback: CallbackQuery, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É"""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É:")
    await state.set_state(TaskListForm.adding_tasks)


async def remove_task_inline(callback: CallbackQuery) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É"""
    user_id = callback.from_user.id
    
    if not user_has_active_list(user_id):
        await callback.message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç! –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
        return
    
    tasks = get_user_tasks(user_id)
    from app.src.bot.keyboards.keyboard_handler import get_tasks_selection_keyboard
    await callback.message.answer(
        "‚ûñ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=get_tasks_selection_keyboard(tasks, "select_remove")
    )


async def rename_task_inline(callback: CallbackQuery, state: FSMContext) -> None:
    """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É"""
    user_id = callback.from_user.id
    
    if not user_has_active_list(user_id):
        await callback.message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç! –ù–µ—á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.")
        return
    
    tasks = get_user_tasks(user_id)
    from app.src.bot.keyboards.keyboard_handler import get_tasks_selection_keyboard
    await callback.message.answer(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_tasks_selection_keyboard(tasks, "select_rename")
    )


async def shuffle_tasks_inline(callback: CallbackQuery) -> None:
    """–ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É"""
    user_id = callback.from_user.id
    
    if not user_has_active_list(user_id):
        await callback.message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç! –ù–µ—á–µ–≥–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—Ç—å.")
        return
    
    tasks = user_task_lists[user_id]['tasks']
    
    import random
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –ª–æ–≥–æ–≤
    old_order = tasks.copy()
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
    random.shuffle(tasks)
    
    # –í—ã–≤–æ–¥–∏–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print(f"üîÑ –ó–∞–¥–∞—á–∏ –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.full_name}")
    print("   –ë—ã–ª–æ:", [f"'{task['text']}'" for task in old_order])
    print("   –°—Ç–∞–ª–æ:", [f"'{task['text']}'" for task in tasks])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –ø–æ—Ä—è–¥–∫–æ–º
    tasks_text = "üîÑ –ó–∞–¥–∞—á–∏ –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã!\n\n–ù–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫:\n"
    for i, task in enumerate(tasks, 1):
        tasks_text += f"{i}. {task['text']}\n"
    
    await callback.message.answer(
        tasks_text,
        reply_markup=get_tasks_inline_keyboard()
    )


async def cancel_action_inline(callback: CallbackQuery) -> None:
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    await callback.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.answer(
        "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        reply_markup=get_tasks_inline_keyboard()
    )