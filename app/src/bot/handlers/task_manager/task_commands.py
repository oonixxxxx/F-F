from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from app.src.bot.states_handler.statess import TaskListForm
from app.src.bot.keyboards.keyboard_handler import tasks_keyboard, get_tasks_inline_keyboard
from app.src.bot.handlers.task_manager.task_service import initialize_user_task_list
from app.src.bot.handlers.task_manager.task_storage import user_task_lists

router = Router()


@router.message(F.text == '/add_tasks_list')
async def start_task_list(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
    user_id = message.from_user.id
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    initialize_user_task_list(user_id)
    
    await message.answer(
        "üìù –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á!\n\n"
        "–í–≤–æ–¥–∏—Ç–µ –∑–∞–¥–∞—á–∏ –ø–æ –æ–¥–Ω–æ–π. –ö–∞–∂–¥–æ–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º:",
        reply_markup=tasks_keyboard
    )
    
    await message.answer(
        "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        reply_markup=get_tasks_inline_keyboard()
    )
    
    await state.set_state(TaskListForm.adding_tasks)


@router.message(F.text == '/quick_tasks')
async def quick_tasks_list(message: Message, state: FSMContext):
    """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
    await message.answer(
        "üìù –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∑–∞–ø—è—Ç—ã–º–∏.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã\n"
        "–°–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–∫—É\n"
        "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ"
    )
    await state.set_state(TaskListForm.waiting_for_tasks)


@router.message(F.text == '/my_lists')
async def show_my_lists(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Å–ø–∏—Å–∫–∏"""
    user_id = message.from_user.id
    
    if user_id not in user_task_lists or not user_task_lists[user_id]['tasks']:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á")
        return
    
    tasks = user_task_lists[user_id]['tasks']
    tasks_text = "üìã –í–∞—à —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n\n"
    
    for i, task_data in enumerate(tasks, 1):
        task_text = task_data["text"]
        task_time = task_data.get("time")
        
        if task_time:
            tasks_text += f"{i}. {task_text} ‚è±Ô∏è {task_time}\n"
        else:
            tasks_text += f"{i}. {task_text}\n"
    
    tasks_text += f"\nüìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}"
    
    await message.answer(tasks_text, reply_markup=get_tasks_inline_keyboard())