from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime
from .states import TaskListForm  # ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è

router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º
tasks_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–ø–∏—Å–æ–∫"), KeyboardButton(text="üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫")],
        [KeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ],
    resize_keyboard=True
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á
user_task_lists = {}

# –ù–∞—á–∞–ª–æ –≤–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
@router.message(F.text == '/add_tasks_list')
async def start_task_list(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_task_lists[user_id] = {
        'tasks': [],
        'created_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    await message.answer(
        "üìù –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á!\n\n"
        "–í–≤–æ–¥–∏—Ç–µ –∑–∞–¥–∞—á–∏ –ø–æ –æ–¥–Ω–æ–π. –ö–∞–∂–¥–æ–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–ø–∏—Å–æ–∫ - –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤–≤–æ–¥ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
        "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫\n"
        "üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "‚ùå –û—Ç–º–µ–Ω–∞ - –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞",
        reply_markup=tasks_keyboard
    )
    await state.set_state(TaskListForm.adding_tasks)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_task_list(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in user_task_lists:
        del user_task_lists[user_id]
    
    await state.clear()
    await message.answer(
        "–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=ReplyKeyboardMarkup(remove_keyboard=True)
    )

# –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞
@router.message(F.text == "üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫")
async def clear_task_list(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in user_task_lists:
        user_task_lists[user_id]['tasks'] = []
    
    await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ!")
    print(f"üîÑ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name}")

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
@router.message(F.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫")
async def show_current_list(message: Message):
    user_id = message.from_user.id
    
    if user_id not in user_task_lists or not user_task_lists[user_id]['tasks']:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç")
        return
    
    tasks = user_task_lists[user_id]['tasks']
    tasks_text = "üìã –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n\n"
    
    for i, task in enumerate(tasks, 1):
        tasks_text += f"{i}. {task}\n"
    
    await message.answer(tasks_text)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
@router.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–ø–∏—Å–æ–∫")
async def finish_task_list(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    if user_id not in user_task_lists or not user_task_lists[user_id]['tasks']:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–¥–∞—á—É.")
        return
    
    tasks = user_task_lists[user_id]['tasks']
    
    # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print("=" * 70)
    print("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –°–ü–ò–°–û–ö –ó–ê–î–ê–ß")
    print("=" * 70)
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (ID: {user_id})")
    print(f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {user_task_lists[user_id]['created_at']}")
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}")
    print("-" * 70)
    
    for i, task in enumerate(tasks, 1):
        print(f"{i:2d}. {task}")
    
    print("=" * 70)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks_text = "‚úÖ –í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
    for i, task in enumerate(tasks, 1):
        tasks_text += f"{i}. {task}\n"
    
    tasks_text += f"\nüìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}"
    
    await message.answer(
        tasks_text,
        reply_markup=ReplyKeyboardMarkup(remove_keyboard=True)
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ —Å–ø–∏—Å–æ–∫
@router.message(TaskListForm.adding_tasks)
async def add_task_to_list(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∫–Ω–æ–ø–æ–∫
    if message.text in ["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–ø–∏—Å–æ–∫", "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", "üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", "‚ùå –û—Ç–º–µ–Ω–∞"]:
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫
    task_text = message.text.strip()
    
    if user_id in user_task_lists:
        user_task_lists[user_id]['tasks'].append(task_text)
        current_count = len(user_task_lists[user_id]['tasks'])
        
        # –í—ã–≤–æ–¥–∏–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª –∫–∞–∂–¥—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ #{current_count}: '{task_text}' - {message.from_user.full_name}")
        
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ #{current_count} –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–ø–∏—Å–æ–∫'")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
@router.message(F.text == '/my_lists')
async def show_my_lists(message: Message):
    user_id = message.from_user.id
    
    if user_id not in user_task_lists or not user_task_lists[user_id]['tasks']:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á")
        return
    
    tasks = user_task_lists[user_id]['tasks']
    
    # –í—ã–≤–æ–¥–∏–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print("=" * 70)
    print("üìã –ê–ö–¢–ò–í–ù–´–ô –°–ü–ò–°–û–ö –ó–ê–î–ê–ß –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    print("=" * 70)
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}")
    print(f"üìÖ –°–æ–∑–¥–∞–Ω: {user_task_lists[user_id]['created_at']}")
    print(f"üìä –ó–∞–¥–∞—á –≤ —Å–ø–∏—Å–∫–µ: {len(tasks)}")
    print("-" * 70)
    
    for i, task in enumerate(tasks, 1):
        print(f"{i:2d}. {task}")
    
    print("=" * 70)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks_text = "üìã –í–∞—à —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n\n"
    for i, task in enumerate(tasks, 1):
        tasks_text += f"{i}. {task}\n"
    
    tasks_text += f"\nüìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}"
    
    await message.answer(tasks_text)

# –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
@router.message(F.text == '/quick_tasks')
async def quick_tasks_list(message: Message, state: FSMContext):
    await message.answer(
        "üìù –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∑–∞–ø—è—Ç—ã–º–∏.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã\n"
        "–°–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–∫—É\n"
        "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ"
    )
    await state.set_state(TaskListForm.waiting_for_tasks)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–ø–∏—Å–∫–∞
@router.message(TaskListForm.waiting_for_tasks)
async def process_quick_tasks(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞–∑–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
    text = message.text.strip()
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    if '\n' in text:
        tasks = [task.strip() for task in text.split('\n') if task.strip()]
    elif ',' in text:
        tasks = [task.strip() for task in text.split(',') if task.strip()]
    else:
        tasks = [text]
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏
    tasks = [task for task in tasks if task]
    
    if not tasks:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–¥–∞—á!")
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫
    user_task_lists[user_id] = {
        'tasks': tasks,
        'created_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    # –í—ã–≤–æ–¥–∏–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print("=" * 70)
    print("üöÄ –ë–´–°–¢–†–´–ô –°–ü–ò–°–û–ö –ó–ê–î–ê–ß –°–û–ó–î–ê–ù")
    print("=" * 70)
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (ID: {user_id})")
    print(f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {user_task_lists[user_id]['created_at']}")
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}")
    print("-" * 70)
    
    for i, task in enumerate(tasks, 1):
        print(f"{i:2d}. {task}")
    
    print("=" * 70)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks_text = "‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω!\n\n"
    for i, task in enumerate(tasks, 1):
        tasks_text += f"{i}. {task}\n"
    
    tasks_text += f"\nüìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}"
    
    await message.answer(tasks_text)
    await state.clear()