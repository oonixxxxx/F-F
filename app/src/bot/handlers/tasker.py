from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from datetime import datetime
import random
from handlers.states_handler.statess import TaskListForm

router = Router()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
@router.message(F.text == '/my_lists')
async def show_my_lists(message: Message):
    user_id = message.from_user.id
    
    if user_id not in user_task_lists or not user_task_lists[user_id]['tasks']:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á")
        return
    
    tasks = user_task_lists[user_id]['tasks']
    
    # –í—ã–≤–æ–¥–∏–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print("=" * 70)
    print("üìã –ê–ö–¢–ò–í–ù–´–ô –°–ü–ò–°–û–ö –ó–ê–î–ê–ß –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    print("=" * 70)
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}")
    print(f"üìÖ –°–æ–∑–¥–∞–Ω: {user_task_lists[user_id]['created_at']}")
    print(f"üìä –ó–∞–¥–∞—á –≤ —Å–ø–∏—Å–∫–µ: {len(tasks)}")
    print("-" * 70)
    
    for i, task in enumerate(tasks, 1):
        print(f"{i:2d}. {task}")
    
    print("=" * 70)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks_text = "üìã –í–∞—à —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n\n"
    for i, task in enumerate(tasks, 1):
        tasks_text += f"{i}. {task}\n"
    
    tasks_text += f"\nüìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}"
    
    await message.answer(tasks_text, reply_markup=get_tasks_inline_keyboard())

# –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
@router.message(F.text == '/quick_tasks')
async def quick_tasks_list(message: Message, state: FSMContext):
    await message.answer(
        "üìù –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∑–∞–ø—è—Ç—ã–º–∏.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã\n"
        "–°–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–∫—É\n"
        "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ"
    )
    await state.set_state(TaskListForm.waiting_for_tasks)