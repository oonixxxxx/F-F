from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from datetime import datetime
import random
from app.src.bot.states_handler.statess import TaskListForm

router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º
tasks_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–ø–∏—Å–æ–∫"), KeyboardButton(text="üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫")],
        [KeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
    ],
    resize_keyboard=True
)

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏
def get_tasks_inline_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_list"),
                InlineKeyboardButton(text="üîÑ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_list")
            ],
            [
                InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å", callback_data="show_list"),
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_list")
            ],
            [
                InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data="delete_list")
            ]
        ]
    )

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def get_edit_inline_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task"),
                InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="remove_task")
            ],
            [
                InlineKeyboardButton(text="üìù –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data="rename_task"),
                InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–º–µ—à–∞—Ç—å", callback_data="shuffle_tasks")
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]
        ]
    )

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏
def get_tasks_selection_keyboard(tasks, action):
    keyboard = []
    for i, task in enumerate(tasks, 1):
        keyboard.append([
            InlineKeyboardButton(text=f"{i}. {task[:30]}{'...' if len(task) > 30 else ''}", callback_data=f"{action}_{i-1}")
        ])
    keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_edit")
    ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
def get_confirm_inline_keyboard(action):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_{action}"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_action")
            ]
        ]
    )

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á
user_task_lists = {}
# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
user_edit_data = {}

# –ù–∞—á–∞–ª–æ –≤–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
@router.message(F.text == '/add_tasks_list')
async def start_task_list(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_task_lists[user_id] = {
        'tasks': [],
        'created_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    await message.answer(
        "üìù –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á!\n\n"
        "–í–≤–æ–¥–∏—Ç–µ –∑–∞–¥–∞—á–∏ –ø–æ –æ–¥–Ω–æ–π. –ö–∞–∂–¥–æ–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º:",
        reply_markup=tasks_keyboard
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        reply_markup=get_tasks_inline_keyboard()
    )
    
    await state.set_state(TaskListForm.adding_tasks)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data.in_(["finish_list", "clear_list", "show_list", "edit_list", "delete_list", "back_to_main", "add_task", "remove_task", "rename_task", "shuffle_tasks", "cancel_action", "back_to_edit"]))
async def handle_inline_buttons(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    action = callback.data
    
    await callback.answer()
    
    if action == "finish_list":
        await finish_task_list_inline(callback, state)
    elif action == "clear_list":
        await clear_task_list_inline(callback, state)
    elif action == "show_list":
        await show_current_list_inline(callback)
    elif action == "edit_list":
        await edit_list_inline(callback)
    elif action == "delete_list":
        await delete_list_inline(callback, state)
    elif action == "back_to_main":
        await back_to_main_inline(callback)
    elif action == "add_task":
        await add_task_inline(callback, state)
    elif action == "remove_task":
        await remove_task_inline(callback)
    elif action == "rename_task":
        await rename_task_inline(callback, state)
    elif action == "shuffle_tasks":
        await shuffle_tasks_inline(callback)
    elif action == "cancel_action":
        await cancel_action_inline(callback)
    elif action == "back_to_edit":
        await edit_list_inline(callback)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(F.data.startswith(("select_rename_", "select_remove_", "confirm_remove_")))
async def handle_task_selection(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data_parts = callback.data.split('_')
    action = data_parts[0]
    
    await callback.answer()
    
    if action == "select":
        task_action = data_parts[1]  # rename –∏–ª–∏ remove
        task_index = int(data_parts[2])
        
        if task_action == "rename":
            await handle_select_rename_task(callback, task_index, state)
        elif task_action == "remove":
            await handle_select_remove_task(callback, task_index)
    
    elif action == "confirm" and data_parts[1] == "remove":
        task_index = int(data_parts[2])
        await handle_confirm_remove_task(callback, task_index)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É
async def finish_task_list_inline(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    if user_id not in user_task_lists or not user_task_lists[user_id]['tasks']:
        await callback.message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–¥–∞—á—É.")
        return
    
    tasks = user_task_lists[user_id]['tasks']
    
    # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print("=" * 70)
    print("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –°–ü–ò–°–û–ö –ó–ê–î–ê–ß")
    print("=" * 70)
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback.from_user.full_name} (ID: {user_id})")
    print(f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {user_task_lists[user_id]['created_at']}")
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}")
    print("-" * 70)
    
    for i, task in enumerate(tasks, 1):
        print(f"{i:2d}. {task}")
    
    print("=" * 70)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks_text = "‚úÖ –í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
    for i, task in enumerate(tasks, 1):
        tasks_text += f"{i}. {task}\n"
    
    tasks_text += f"\nüìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}"
    
    await callback.message.answer(
        tasks_text,
        reply_markup=ReplyKeyboardMarkup(remove_keyboard=True)
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫
    if user_id in user_task_lists:
        del user_task_lists[user_id]
    await state.clear()

# –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É
async def clear_task_list_inline(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if user_id in user_task_lists:
        user_task_lists[user_id]['tasks'] = []
    
    await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ!")
    print(f"üîÑ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.full_name}")

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É
async def show_current_list_inline(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if user_id not in user_task_lists or not user_task_lists[user_id]['tasks']:
        await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç")
        return
    
    tasks = user_task_lists[user_id]['tasks']
    tasks_text = "üìã –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n\n"
    
    for i, task in enumerate(tasks, 1):
        tasks_text += f"{i}. {task}\n"
    
    await callback.message.answer(tasks_text, reply_markup=get_tasks_inline_keyboard())

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É
async def edit_list_inline(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if user_id not in user_task_lists or not user_task_lists[user_id]['tasks']:
        await callback.message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç! –ù–µ—á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.")
        return
    
    await callback.message.answer(
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á:",
        reply_markup=get_edit_inline_keyboard()
    )

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É
async def delete_list_inline(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    if user_id not in user_task_lists:
        await callback.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    await callback.message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á?",
        reply_markup=get_confirm_inline_keyboard("delete")
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞
@router.callback_query(F.data == "confirm_delete")
async def handle_confirm_delete_list(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    if user_id in user_task_lists:
        del user_task_lists[user_id]
    
    await callback.message.answer("üóëÔ∏è –í–µ—Å—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —É–¥–∞–ª–µ–Ω!")
    await state.clear()

# –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
async def back_to_main_inline(callback: CallbackQuery):
    await callback.message.answer(
        "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        reply_markup=get_tasks_inline_keyboard()
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É
async def add_task_inline(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É:")
    await state.set_state(TaskListForm.adding_tasks)

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É
async def remove_task_inline(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if user_id not in user_task_lists or not user_task_lists[user_id]['tasks']:
        await callback.message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç! –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
        return
    
    tasks = user_task_lists[user_id]['tasks']
    
    await callback.message.answer(
        "‚ûñ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=get_tasks_selection_keyboard(tasks, "select_remove")
    )

# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É
async def rename_task_inline(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    if user_id not in user_task_lists or not user_task_lists[user_id]['tasks']:
        await callback.message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç! –ù–µ—á–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.")
        return
    
    tasks = user_task_lists[user_id]['tasks']
    
    await callback.message.answer(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_tasks_selection_keyboard(tasks, "select_rename")
    )

# –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É
async def shuffle_tasks_inline(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if user_id not in user_task_lists or not user_task_lists[user_id]['tasks']:
        await callback.message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç! –ù–µ—á–µ–≥–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—Ç—å.")
        return
    
    tasks = user_task_lists[user_id]['tasks']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –ª–æ–≥–æ–≤
    old_order = tasks.copy()
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
    random.shuffle(tasks)
    
    # –í—ã–≤–æ–¥–∏–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print(f"üîÑ –ó–∞–¥–∞—á–∏ –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.full_name}")
    print("   –ë—ã–ª–æ:", [f"'{task}'" for task in old_order])
    print("   –°—Ç–∞–ª–æ:", [f"'{task}'" for task in tasks])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –ø–æ—Ä—è–¥–∫–æ–º
    tasks_text = "üîÑ –ó–∞–¥–∞—á–∏ –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã!\n\n–ù–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫:\n"
    for i, task in enumerate(tasks, 1):
        tasks_text += f"{i}. {task}\n"
    
    await callback.message.answer(
        tasks_text,
        reply_markup=get_tasks_inline_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
async def handle_select_rename_task(callback: CallbackQuery, task_index: int, state: FSMContext):
    user_id = callback.from_user.id
    
    if user_id not in user_task_lists:
        await callback.message.answer("‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    tasks = user_task_lists[user_id]['tasks']
    
    if task_index < 0 or task_index >= len(tasks):
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    user_edit_data[user_id] = {
        'action': 'renaming',
        'task_index': task_index,
        'old_task': tasks[task_index]
    }
    
    await callback.message.answer(
        f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ ‚Ññ{task_index + 1}:\n"
        f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: {tasks[task_index]}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:"
    )
    
    await state.set_state(TaskListForm.editing_task)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
async def handle_select_remove_task(callback: CallbackQuery, task_index: int):
    user_id = callback.from_user.id
    
    if user_id not in user_task_lists:
        await callback.message.answer("‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    tasks = user_task_lists[user_id]['tasks']
    
    if task_index < 0 or task_index >= len(tasks):
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")
        return
    
    task_to_remove = tasks[task_index]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
    confirm_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_remove_{task_index}"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_action")
            ]
        ]
    )
    
    await callback.message.answer(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É ‚Ññ{task_index + 1}?\n"
        f"üìù {task_to_remove}",
        reply_markup=confirm_keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
async def handle_confirm_remove_task(callback: CallbackQuery, task_index: int):
    user_id = callback.from_user.id
    
    if user_id not in user_task_lists:
        await callback.message.answer("‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    tasks = user_task_lists[user_id]['tasks']
    
    if task_index < 0 or task_index >= len(tasks):
        await callback.message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏")
        return
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
    removed_task = tasks.pop(task_index)
    
    # –í—ã–≤–æ–¥–∏–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print(f"‚ûñ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ #{task_index + 1}: '{removed_task}' - {callback.from_user.full_name}")
    
    await callback.message.answer(
        f"‚úÖ –ó–∞–¥–∞—á–∞ ‚Ññ{task_index + 1} —É–¥–∞–ª–µ–Ω–∞!\n"
        f"üìù {removed_task}\n\n"
        f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–¥–∞—á: {len(tasks)}",
        reply_markup=get_tasks_inline_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
@router.message(TaskListForm.editing_task)
async def process_task_edit(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    if user_id not in user_edit_data or user_edit_data[user_id]['action'] != 'renaming':
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        await state.clear()
        return
    
    if user_id not in user_task_lists:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    edit_data = user_edit_data[user_id]
    task_index = edit_data['task_index']
    new_text = message.text.strip()
    
    if not new_text:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
    old_text = user_task_lists[user_id]['tasks'][task_index]
    user_task_lists[user_id]['tasks'][task_index] = new_text
    
    # –í—ã–≤–æ–¥–∏–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print(f"‚úèÔ∏è –ó–∞–¥–∞—á–∞ #{task_index + 1} –∏–∑–º–µ–Ω–µ–Ω–∞:")
    print(f"   –ë—ã–ª–æ: '{old_text}'")
    print(f"   –°—Ç–∞–ª–æ: '{new_text}' - {message.from_user.full_name}")
    
    await message.answer(
        f"‚úÖ –ó–∞–¥–∞—á–∞ ‚Ññ{task_index + 1} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n\n"
        f"üìù –ë—ã–ª–æ: {old_text}\n"
        f"üìù –°—Ç–∞–ª–æ: {new_text}",
        reply_markup=get_tasks_inline_keyboard()
    )
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id in user_edit_data:
        del user_edit_data[user_id]
    
    await state.clear()

# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
async def cancel_action_inline(callback: CallbackQuery):
    await callback.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.answer(
        "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        reply_markup=get_tasks_inline_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_task_list(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in user_task_lists:
        del user_task_lists[user_id]
    
    await state.clear()
    await message.answer(
        "–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=ReplyKeyboardMarkup(remove_keyboard=True)
    )

# –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞
@router.message(F.text == "üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫")
async def clear_task_list(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id in user_task_lists:
        user_task_lists[user_id]['tasks'] = []
    
    await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ!")
    print(f"üîÑ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.full_name}")

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
@router.message(F.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫")
async def show_current_list(message: Message):
    user_id = message.from_user.id
    
    if user_id not in user_task_lists or not user_task_lists[user_id]['tasks']:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç")
        return
    
    tasks = user_task_lists[user_id]['tasks']
    tasks_text = "üìã –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n\n"
    
    for i, task in enumerate(tasks, 1):
        tasks_text += f"{i}. {task}\n"
    
    await message.answer(tasks_text, reply_markup=get_tasks_inline_keyboard())

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
@router.message(F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–ø–∏—Å–æ–∫")
async def finish_task_list(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    if user_id not in user_task_lists or not user_task_lists[user_id]['tasks']:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–¥–∞—á—É.")
        return
    
    tasks = user_task_lists[user_id]['tasks']
    
    # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print("=" * 70)
    print("üìã –§–ò–ù–ê–õ–¨–ù–´–ô –°–ü–ò–°–û–ö –ó–ê–î–ê–ß")
    print("=" * 70)
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (ID: {user_id})")
    print(f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {user_task_lists[user_id]['created_at']}")
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}")
    print("-" * 70)
    
    for i, task in enumerate(tasks, 1):
        print(f"{i:2d}. {task}")
    
    print("=" * 70)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks_text = "‚úÖ –í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
    for i, task in enumerate(tasks, 1):
        tasks_text += f"{i}. {task}\n"
    
    tasks_text += f"\nüìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}"
    
    await message.answer(
        tasks_text,
        reply_markup=ReplyKeyboardMarkup(remove_keyboard=True)
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–ø–∏—Å–æ–∫
    if user_id in user_task_lists:
        del user_task_lists[user_id]
    await state.clear()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ —Å–ø–∏—Å–æ–∫
@router.message(TaskListForm.adding_tasks)
async def add_task_to_list(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∫–Ω–æ–ø–æ–∫
    if message.text in ["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–ø–∏—Å–æ–∫", "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", "üîÑ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", "‚ùå –û—Ç–º–µ–Ω–∞"]:
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫
    task_text = message.text.strip()
    
    if user_id in user_task_lists:
        user_task_lists[user_id]['tasks'].append(task_text)
        current_count = len(user_task_lists[user_id]['tasks'])
        
        # –í—ã–≤–æ–¥–∏–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª –∫–∞–∂–¥—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ #{current_count}: '{task_text}' - {message.from_user.full_name}")
        
        await message.answer(
            f"‚úÖ –ó–∞–¥–∞—á–∞ #{current_count} –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
            reply_markup=get_tasks_inline_keyboard()
        )

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
@router.message(F.text == '/my_lists')
async def show_my_lists(message: Message):
    user_id = message.from_user.id
    
    if user_id not in user_task_lists or not user_task_lists[user_id]['tasks']:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á")
        return
    
    tasks = user_task_lists[user_id]['tasks']
    
    # –í—ã–≤–æ–¥–∏–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print("=" * 70)
    print("üìã –ê–ö–¢–ò–í–ù–´–ô –°–ü–ò–°–û–ö –ó–ê–î–ê–ß –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø")
    print("=" * 70)
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}")
    print(f"üìÖ –°–æ–∑–¥–∞–Ω: {user_task_lists[user_id]['created_at']}")
    print(f"üìä –ó–∞–¥–∞—á –≤ —Å–ø–∏—Å–∫–µ: {len(tasks)}")
    print("-" * 70)
    
    for i, task in enumerate(tasks, 1):
        print(f"{i:2d}. {task}")
    
    print("=" * 70)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks_text = "üìã –í–∞—à —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n\n"
    for i, task in enumerate(tasks, 1):
        tasks_text += f"{i}. {task}\n"
    
    tasks_text += f"\nüìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}"
    
    await message.answer(tasks_text, reply_markup=get_tasks_inline_keyboard())

# –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
@router.message(F.text == '/quick_tasks')
async def quick_tasks_list(message: Message, state: FSMContext):
    await message.answer(
        "üìù –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á!\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∑–∞–ø—è—Ç—ã–º–∏.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã\n"
        "–°–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–∫—É\n"
        "–ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ"
    )
    await state.set_state(TaskListForm.waiting_for_tasks)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–ø–∏—Å–∫–∞
@router.message(TaskListForm.waiting_for_tasks)
async def process_quick_tasks(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞–∑–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
    text = message.text.strip()
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    if '\n' in text:
        tasks = [task.strip() for task in text.split('\n') if task.strip()]
    elif ',' in text:
        tasks = [task.strip() for task in text.split(',') if task.strip()]
    else:
        tasks = [text]
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏
    tasks = [task for task in tasks if task]
    
    if not tasks:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–¥–∞—á!")
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫
    user_task_lists[user_id] = {
        'tasks': tasks,
        'created_at': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    # –í—ã–≤–æ–¥–∏–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    print("=" * 70)
    print("üöÄ –ë–´–°–¢–†–´–ô –°–ü–ò–°–û–ö –ó–ê–î–ê–ß –°–û–ó–î–ê–ù")
    print("=" * 70)
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (ID: {user_id})")
    print(f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {user_task_lists[user_id]['created_at']}")
    print(f"üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}")
    print("-" * 70)
    
    for i, task in enumerate(tasks, 1):
        print(f"{i:2d}. {task}")
    
    print("=" * 70)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tasks_text = "‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω!\n\n"
    for i, task in enumerate(tasks, 1):
        tasks_text += f"{i}. {task}\n"
    
    tasks_text += f"\nüìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(tasks)}"
    
    await message.answer(tasks_text, reply_markup=get_tasks_inline_keyboard())
    await state.clear()